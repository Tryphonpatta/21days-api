name: Push-to-EC2

# Trigger deployment only on push to the main branch
on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Deploy to EC2 on main branch push
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code from GitHub
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: (Optional) Build Docker image if applicable
      - name: Build Docker image
        run: |
          docker build \
          --platform linux/amd64 \
          --build-arg JWT_SECRET=${{ secrets.JWT_SECRET }} \
          --build-arg DATABASE_URL=${{ secrets.DATABASE_URL }} \
          -t 21days-api:latest .

      # Step 3: Log in to Docker Hub (Optional)
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 4: Push Docker image to Docker Hub (Optional)
      - name: Push Docker image to Docker Hub
        run: |
          docker tag 21days-api patthadon/21days-api
          docker push patthadon/21days-api:latest

      # Step 5: Execute SSH commands remotely on EC2
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_DNS }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo docker pull patthadon/21days-api
            sudo docker stop 21days-api || true
            sudo docker rm 21days-api || true
            echo "Removing old image..."
            OLD_IMAGE_ID=$(sudo docker images patthadon/21days-api -q | tail -n +2)
            if [ -n "$OLD_IMAGE_ID" ]; then
              sudo docker rmi $OLD_IMAGE_ID || true
            fi
            sudo docker run -d --name 21days-api -p 3000:3001 patthadon/21days-api
            sudo docker network connect nginx-proxy_default 21days-api
